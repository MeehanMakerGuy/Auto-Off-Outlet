/*Soldering Iron Safety Auto Shut Off

Turns Soldering Iron off after DelayTime (in msec).

At times it's just to easy to walk away from my workbench because of other things that 
call for my attention.  After finding my soldering still on many hours later (but still 
safely in its holder) I became very concerned that I might either harm my soldering iron 
(or it's tip) or even worse----START A FIRE.  I decided that it would be best if I set
something up that turned it off automatically just in case I forgot.  I know that 
Belkin makes a device to do this, but it's only available by mail order in my area, so 
I figured I probably had the parts needed to make this (most of which I did, everything 
else I was able to find at the nearby hardware store).  
I used a 12v relay because I have so many of them stripped from microwave ovens and other 
appliances.  If you have a 5v relay with a current draw under 20mA (for the coil) you 
should be able to do this without a transistor and a dual DC power supply (this project uses
a 12v PSU from 110v house mains for the relay circuit and an LM7805 regulator for supply to 
the microcontroller}.

Prototyped on Arduino and ported to ATtiny85 after working out bugs.
*/

/*
Pins -all pins used are digital pins
*/
int LEDOffPin = 0;  //Red LED, Soldering Iron Off
int LEDOnPin = 1;  //Greeb LED Soldering Iron On
int RelayPin = 3;  
/*This goes to the base, through a resistor, of an NPN transistor to 
control a relay*/
int ButtonPin = 2;  //Button to activate/reset timer (has a PullDown resistor)

//Variables
unsigned long OnTime; //storage for time when Iron turned on (button pressed)
unsigned long OffTime;  //storage for time for turning off Iron
unsigned long DelayTime = 120000; //Delay before turning Iron Off, in msec (2min)
unsigned long NowTime; //storage for current time from millis()
unsigned long CountDown = 20000; //countdown to turning Iron off, in msec (20sec)

boolean ButtonState; //storage for button press, button state goes LOW when pressed
boolean RelayState;  //storage for holding state of relay

void setup() {
  pinMode(LEDOffPin, OUTPUT); //Red LED
  pinMode(LEDOnPin, OUTPUT);  //Green Led
  pinMode(RelayPin, OUTPUT);  //to base of Transistor activating relay
  pinMode(ButtonPin, INPUT);  //from momentary button 
  
  digitalWrite(RelayPin, LOW); //insure Iron is off at startup
  digitalWrite(LEDOffPin, HIGH); //indicates off at startup
  digitalWrite(LEDOnPin, LOW);
  
  ButtonState = LOW; //button not pressed, initial condition
  RelayState = LOW;  //relay not active, intial condition
  }

void loop() {
  NowTime = millis();
  
  ButtonState = digitalRead(ButtonPin);  //Still NEED DeBounce code 
     
  if (ButtonState == HIGH)  { 
    /*changed "=" to "==" now does not automatically switch to on after the 
    initial  2 second delay, butt when button is pressed circuit is only active
    as long as button is pressed*/
    OnTime = NowTime; //time Iron turns on
    OffTime = OnTime + DelayTime;  //time when Iron is shut off
    digitalWrite(RelayPin, HIGH);  //turns Iron on 
    RelayState = HIGH;  //relay is active and Iron is on
    digitalWrite(LEDOffPin, LOW);  //Red LED off
    digitalWrite(LEDOnPin, HIGH);  //Green LED on 
  }
  
  if (RelayState == HIGH&&NowTime >= OffTime - CountDown)  {  /*Routine to flash 
  Red - Green - Red at 1/4 sec intervals beginning at 20 second count down prior to turning off*/
    digitalWrite(LEDOffPin, HIGH); //Red LED on
    digitalWrite(LEDOnPin, LOW);  //Green LED off
    delay (250);  //quarter sec flash
    digitalWrite(LEDOffPin, LOW);  //Red LED on
    digitalWrite(LEDOnPin, HIGH);  //Green LED off
    delay (250);  //quarter sec flash
  }
  
  if (NowTime >= OffTime) {
    digitalWrite(RelayPin, LOW);  //Time is up, turns off Soldering Iron
    RelayState = LOW;  //indicates Relay is off, don't check for time
    digitalWrite(LEDOffPin, HIGH);  //Red LED iluminated
    digitalWrite(LEDOnPin, LOW);   //Green LED off
    OffTime = millis();  //sets OffTime to current time (redundancy)
   } 
}

